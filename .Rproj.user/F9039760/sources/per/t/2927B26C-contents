---
title: "simulation-tests"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{simulation-tests}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

```{r setup}
library(TriLLIEM)
library(tidyverse); theme_set(theme_bw())
library(parallel)
library(knitr)
```

We simulate data under the following models:

```{r}
## Include C+M, C+M:E, Im + C
## What happens if we model MS or MaS data as HWE (not a test), popstrat as HWE
## Talk about HWE for lab meeting
conditions <- expand.grid(
  maf = 0.3,
  R = c(1, 1.15),
  S = 1,
  V = c(1, 1.5, 1.6),
  mtmodel = c("HWE", "MS", "MaS"),
  Im = c(1, 1.2, 1.4),
  If = c(1, 1.2, 1.4),
  includeE = c(FALSE, TRUE),
  Einteraction = c("Im", "If"),
  prE = c(0.3, 0.5),
  includeControl = c(FALSE, TRUE),
  prControl = 0.5,
  stringsAsFactors = FALSE
) %>%
  filter(
    !(!includeE & !(Einteraction == "Im" & V == 1 & prE == 0.3)),
    !(!includeControl & !(mtmodel != "MaS")),
    (R == 1) + (S == 1) + (V == 1) + (Im == 1) + (If == 1) >= 4,
    !(If != 1 & (Im != 1 | Einteraction == "Im"))
  )

head(conditions)
```

```{r data_analysis, cache = TRUE}
start.time <- Sys.time()
dat <- mcmapply(
  FUN = function(R, S, V, ...) {
    lapply(X = 1:100,
           function(X) {             
             simulateData(
               R = c(1, R, R ^ 2),
               S = c(1, S, S ^ 2),
               V = c(1, V, V ^ 2),
               ...)
             }
    )
  },
  maf = conditions$maf,
  R = conditions$R,
  S = conditions$S,
  V = conditions$V,
  mtmodel = conditions$mtmodel,
  Im = conditions$Im,
  If = conditions$If,
  includeE = conditions$includeE,
  Einteraction = conditions$Einteraction,
  prE = conditions$prE,
  includeControl = conditions$includeControl,
  prControl = conditions$prControl,
  SIMPLIFY = FALSE,
  mc.cores = 10
)
end.time <- Sys.time()
print(end.time - start.time)

effects_vec <- conditions %>% 
  apply(FUN = function(row) 
    with(row, c("C", "M", if (Im != 1 || (includeE && Einteraction == "Im")) "Im", if (If != 1 || (includeE && Einteraction == "If")) "If", if (includeE) paste0(Einteraction, ":E"))), 
        MARGIN = 1)

start.time <- Sys.time()
tril_results <- mcmapply(
  FUN = function(dat, effects, includeE, Einteraction, includeD)
    lapply(
      X = dat,
      FUN = function(dat, effects, includeE, Einteraction, includeD){
      TriLLIEM(dat = dat$dat4R, effects = effects, includeE = includeE, 
               Einteraction = Einteraction, includeD = includeD, Estrat = TRUE) %>% 
        summary() %>% 
        coef() %>%
        .[!grepl("as.factor", rownames(.)), c(1, 4)]
    },
      effects = effects,
      includeE = includeE,
      Einteraction = Einteraction,
      includeD = includeD
    ),
  dat = dat,
  effects = effects_vec,
  includeE = conditions$includeE,
  Einteraction = conditions$Einteraction,
  includeD = conditions$includeControl,
  SIMPLIFY = FALSE,
  mc.cores = 10
)
end.time <- Sys.time()
print(end.time - start.time)

start.time <- Sys.time()
hap_results <- mcmapply(
  FUN = function(dat, effects, includeE, includeD)
    lapply(
      X = dat,
      FUN = function(dat, effects, includeE, includeD){
      runHaplin(dat = dat$dat4haplin, effects = setdiff(effects, c("Im", "If")),
                includeE = includeE, PoO = any(c("Im", "If") %in% effects), 
                includeD = includeD) %>% 
        TriLLIEM:::summ_haplin(PoO = any(c("Im", "If") %in% effects), 
                               includeE = includeE)
    },
      effects = effects,
      includeE = includeE,
      includeD = includeD
    ),
  dat = dat,
  effects = effects_vec,
  includeE = conditions$includeE,
  includeD = conditions$includeControl,
  SIMPLIFY = FALSE,
  mc.cores = 10
)
end.time <- Sys.time()
print(end.time - start.time)

## check log file for emim controls
start.time <- Sys.time()
emim_results <- mcmapply(
  FUN = function(dat, effects, includeE)
    lapply(
      X = dat,
      FUN = function(dat, effects, includeE){
      runEMIM(peddat = dat$dat4EMIM, effects = effects,
                includeE = includeE) %>% 
        TriLLIEM:::summ_emim()
    },
      effects = effects,
      includeE = includeE
    ),
  dat = dat,
  effects = effects_vec,
  includeE = conditions$includeE,
  SIMPLIFY = FALSE,
  mc.cores = 10
)
end.time <- Sys.time()
print(end.time - start.time)
```

Create boxplots:

```{r}
## Add a table with avg of all estimates each condition
## % bias (true - est)/true, if exceeds threshold then plot
# Compare with EMIM and Haplin errors, check why they look similar but bias is a little different
# Check power for imprinting, with diff eff sizes
# If Im is in the model, don't include E:M or M (but M works, although could be overparameterized)
bias <- mapply(
  FUN = function(results, C, M, Im, If){
    point_est_means <- 
      mapply(
        FUN = function(mat){
          mat[,1]
        },
        mat = results
      ) %>%
      t() %>%
      colMeans() %>%
      exp()
    
    true_vals <- c(C = C, M = M, Im = Im, If = If)[names(point_est_means)]
    bias <- (true_vals - point_est_means)/true_vals
    return(bias)
  },
  results = tril_results,
  C = conditions$R,
  M = conditions$S,
  Im = conditions$Im,
  If = conditions$If
) %>%
  lapply(as.data.frame.list) %>%
  bind_rows() %>%
  rename(bias_C = "C",
         bias_M = "M",
         bias_Im = "Im",
         bias_If = "If")

reject_rate <- lapply(
  X = tril_results,
  FUN = function(X){
    pvals <- 
      mapply(
        FUN = function(mat){
          mat[,2]
        },
        mat = X
      ) %>%
      t() %>%
      apply(
        MARGIN = 2,
        FUN = function(x) (x < 0.05) %>% mean()
      )
  }
) %>%
  lapply(as.data.frame.list) %>%
  bind_rows() %>%
  rename(reject_C = "C",
         reject_M = "M",
         reject_Im = "Im",
         reject_If = "If")

conditions <- conditions %>% mutate(bias, reject_rate)
kable(conditions, caption = "Conditions, bias and rejection rates")

point_est_trill <-
  mapply(
    res = tril_results,
    FUN = function(res) {
      mapply(
        mat = res,
        FUN = function(mat)
          mat[, 1]
      ) %>%
        t() %>%
        exp()
    }
  )
pval_est_trill <-
  mapply(
    res = tril_results,
    FUN = function(res) {
      mapply(
        mat = res,
        FUN = function(mat)
          mat[, 2]
      ) %>%
        t()
    }
  )
    
point_est_emim <- 
  mapply(
    FUN = function(res){
      mapply(
        FUN = function(res){
          res$effects
        },
        res = res
      ) %>%
        t()
    },
    res = emim_results
  )
pval_est_emim <- 
  mapply(
    FUN = function(res){
      mapply(
        FUN = function(res){
          res$pval
        },
        res = res
      ) %>%
        t()
    },
    res = emim_results
  )

mapply(
  FUN = function(point_est_trill, point_est_emim, pval_est_trill, pval_est_emim,
                 effects_vec, includeE, Einteraction, includeControl){
    
    plot(point_est_trill[,1], point_est_emim[,1], 
         main = paste("Effects:", 
                      paste(effects_vec, collapse = " "), 
                      ifelse(includeE, paste(" E:", Einteraction), ""),
                      ifelse(includeControl, ", with controls", ", no controls")
                      )
         )
    abline(a = 0, b = 1, col = "red")
    plot(point_est_trill[,2], point_est_emim[,2], 
         main = paste("Effects:", 
                      paste(effects_vec, collapse = " "), 
                      ifelse(includeE, paste(" E:", Einteraction), ""),
                      ifelse(includeControl, ", with controls", ", no controls")
                      )
         )
    abline(a = 0, b = 1, col = "red")
    
    boxplot(
      point_est_trill,
      las = 2,
      horizontal = TRUE,
      main = paste(
        "point est, Effects:",
        paste(effects_vec, collapse = " "), 
        ifelse(includeE, paste(" E:", Einteraction), ""),
        ifelse(includeControl, ", with controls", ", no controls")
      )
    )
    
    boxplot(
      pval_est_trill,
      las = 2,
      horizontal = TRUE,      
      main = paste(
        "pval, Effects:",
        paste(effects_vec, collapse = " "), 
        ifelse(includeE, paste(" E:", Einteraction), ""),
        ifelse(includeControl, ", with controls", ", no controls")
      )
    )
    abline(v = log(0.05), col = "red", lty = 2)
  },
  point_est_trill,
  point_est_emim,
  pval_est_trill,
  pval_est_emim,
  effects_vec,
  conditions$includeE,
  conditions$Einteraction,
  conditions$includeControl
)

## Double check power for E:Im
## Population stratification simulations (don't worry about PS test)
## Repeat each simulation 2000 times to get a narrow enough CI (listed on notion)
## popstrat, could look at if PoO has more false positives if there is a small C effect
## popstrat is not an issue unless there are different E effects
```

