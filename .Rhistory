L %*% test$y
fitted(test)[2]
L[2]
L[2,]
t(L[2,])%*%110.9699
t(L[2,])%*%fitted(test)
L %*% test$y
L %*% test$y[[2]]
L[2,] %*% test$y
t(L[2,])%*%fitted(test)
fitted(test)[[2]]/(t(L[2,])%*%fitted(test))
L[2,] %*% test$y
fitted(test)[[2]]/(t(L[2,])%*%fitted(test))
1 - fitted(test)[[2]]/(t(L[2,])%*%fitted(test))
L[9,]
test
?simulateData
?simulateData
library(TriLLIEM)
?simulateData
devtools::document()
?simulateData
devtools::load_all()
dat <- simulateData(ntrios = 1000, nControl = 500, includeControl = TRUE)
trill <- TriLLIEM(mtmodel = "HWE", dat = dat$dat4R, includeControl = TRUE) %>% summary %>% coef
trill <- TriLLIEM(mtmodel = "HWE", dat = dat$dat4R, includeD = TRUE) %>% summary %>% coef
emim <- runEMIM(mtmodel = "HWE", peddat = dat$dat4EMIM) %>% summ_emim()
trill
emim
devtools::load_all()
trill <- TriLLIEM(mtmodel = "HWE", dat = dat$dat4R, includeD = TRUE) %>% summary %>% coef
trill
View(tril_results)
tril_results[[1]][[1]]$nostrat[[1]]
tril_results[[1]][[84]]$nostrat[[1]]
tril_results[[1]][[85]]$nostrat[[1]]
emim_results[[1]][[85]][[1]]
hap_results[[1]][[85]][[1]]
View(hap_results)
hap_results[[85]][[1]]
View(conditions)
conditions[85,]
View(conditions)
devtools::build()
dat <- simulateData(ntrios = 1000, nControl = 500, includeControl = TRUE)
trill <- TriLLIEM(mtmodel = "HWE", dat = dat$dat4R, includeD = TRUE) %>% summary %>% coef
emim <- runEMIM(mtmodel = "HWE", peddat = dat$dat4EMIM) %>% summ_emim()
emim <- runEMIM(mtmodel = "HWE", peddat = dat$dat4EMIM) %>% TriLLIEM:::summ_emim()
trill
emim
testdat <- simulateData(ntrios = 1000, nControl = 500, includeControl = TRUE)
library(TriLLIEM)
testdat <- simulateData(ntrios = 1000, nControl = 500, includeControl = TRUE)
emim <- runEMIM(mtmodel = "HWE", peddat = testdat$dat4EMIM) %>% TriLLIEM:::summ_emim()
trill <- TriLLIEM(dat = testdat$dat4R, mtmodel = "HWE", includeD = TRUE) %>% summary() %>% coef
emim
trill
testdat <- simulateData(ntrios = 1000, nControl = 500, includeControl = TRUE)
emim <- runEMIM(mtmodel = "HWE", peddat = testdat$dat4EMIM) %>% TriLLIEM:::summ_emim()
trill <- TriLLIEM(dat = testdat$dat4R, mtmodel = "HWE", includeD = TRUE) %>% summary() %>% coef
emim
trill
testdat <- simulateData(ntrios = 1000, nControl = 500, includeControl = TRUE)
emim <- runEMIM(mtmodel = "HWE", peddat = testdat$dat4EMIM) %>% TriLLIEM:::summ_emim()
trill <- TriLLIEM(dat = testdat$dat4R, mtmodel = "HWE", includeD = TRUE) %>% summary() %>% coef
emim
trill
testdat <- simulateData(ntrios = 1000, nControl = 500, includeControl = TRUE)
emim <- runEMIM(mtmodel = "HWE", peddat = testdat$dat4EMIM) %>% TriLLIEM:::summ_emim()
trill <- TriLLIEM(dat = testdat$dat4R, mtmodel = "HWE", includeD = TRUE) %>% summary() %>% coef
emim
trill
exp(0.020616196)
install.packages("../TriLLIEM_0.1.0.tar.gz")
testdat <- simulateData(ntrios = 1000, nControl = 500, includeControl = TRUE)
emim <- runEMIM(mtmodel = "HWE", peddat = testdat$dat4EMIM) %>% TriLLIEM:::summ_emim()
trill <- TriLLIEM(dat = testdat$dat4R, mtmodel = "HWE", includeD = TRUE) %>% summary() %>% coef
emim
trill
devtools::load_all()
testdat <- simulateData(ntrios = 1000, nControl = 500, includeControl = TRUE)
emim <- runEMIM(mtmodel = "HWE", peddat = testdat$dat4EMIM) %>% TriLLIEM:::summ_emim()
trill <- TriLLIEM(dat = testdat$dat4R, mtmodel = "HWE", includeD = TRUE) %>% summary() %>% coef
emim
trill
testdat <- simulateData(ntrios = 1000)
emim <- runEMIM(mtmodel = "HWE", peddat = testdat$dat4EMIM) %>% TriLLIEM:::summ_emim()
trill <- TriLLIEM(dat = testdat$dat4R, mtmodel = "HWE") %>% summary() %>% coef
emim
trill
testdat <- simulateData(ntrios = 1000, nControl = 500, includeControl = TRUE)
emim <- runEMIM(mtmodel = "HWE", peddat = testdat$dat4EMIM) %>% TriLLIEM:::summ_emim()
trill <- TriLLIEM(dat = testdat$dat4R, mtmodel = "HWE", includeD = TRUE) %>% summary() %>% coef
testdat <- simulateData(ntrios = 1000, nControl = 500, includeControl = TRUE)
emim <- runEMIM(mtmodel = "HWE", peddat = testdat$dat4EMIM) %>% TriLLIEM:::summ_emim()
trill <- TriLLIEM(dat = testdat$dat4R, mtmodel = "HWE", includeD = TRUE) %>% summary() %>% coef
emim
trill
testdat <- simulateData(ntrios = 1000, nControl = 500, includeControl = TRUE)
emim <- runEMIM(mtmodel = "HWE", peddat = testdat$dat4EMIM) %>% TriLLIEM:::summ_emim()
trill <- TriLLIEM(dat = testdat$dat4R, mtmodel = "HWE", includeD = TRUE) %>% summary() %>% coef
emim
trill
testdat$dat4R
trill <- TriLLIEM(dat = testdat$dat4R, mtmodel = "HWE", includeD = TRUE)
trill$data
trill$data[,-c(10, 11)]
trill$data[,-c(10, 11)] %>% identical(testdat$dat4R)
trill$data[,"count"] %>% identical(testdat$dat4R[,"count"])
trill$model
log(2)
trill$coefficients
emim
exp(-0.05590675)
trill$fitted.values
trill$rank
trill$formula
trill$data[,-c(10, 11)] %>% identical(testdat$dat4R %>% mutate(M = M*D, C = C*D))
library(tidyverse)
trill$data[,-c(10, 11)] %>% identical(testdat$dat4R %>% mutate(M = M*D, C = C*D))
testdat <- simulateData(ntrios = 1000, nControl = 500, includeControl = TRUE)
emim <- runEMIM(mtmodel = "HWE", peddat = testdat$dat4EMIM) %>% TriLLIEM:::summ_emim()
trill <- TriLLIEM(dat = testdat$dat4R, mtmodel = "HWE", includeD = TRUE) %>% summary() %>% coef
emim
trill
library(TriLLIEM)
testdat <- simulateData(ntrios = 1000, nControl = 500, includeControl = TRUE)
emim <- runEMIM(mtmodel = "HWE", peddat = testdat$dat4EMIM) %>% TriLLIEM:::summ_emim()
trill <- TriLLIEM(dat = testdat$dat4R, mtmodel = "HWE", includeD = TRUE) %>% summary() %>% coef
emim
trill
## Run a loglinear analysis with the specified model
runLoglin=function(mtmodel, effects, dat, PStest=FALSE)
{
# Portion of model equation and offset depends on mating type model
dat$offset=rep(NA,nrow(dat))
if (mtmodel=="HW"){
dat$HWgeno=dat[,"M"]+dat[,"F"]
mteffect="HWgeno"
if (sum(dat$E==1)>0){ # E variable in dataset
# Assumes order type=1:15 and controls children are in dataset
dat$offset[dat$E==0]=c(rep(1,8),2,rep(1,6))
dat$offset[dat$E==1]=c(rep(1,8),2,rep(1,6))
} else {
# Assumes order type=1:15 and controls children are in dataset
dat$offset=c(rep(1,8),2,rep(1,6))
}
modelformula="count~" # Must include intercept for HW model because of log(1-p) term
} else if (mtmodel=="MS"){
mteffect="as.factor(mt_MS)"
if (sum(dat$E==1)>0 ) { # Includes E in dataset
# Assumes order type=1:15 and controls children are in dataset
dat$offset[dat$E==1]=c(rep(1,8),2,rep(1,6))
dat$offset[dat$E==0]=c(rep(1,8),2,rep(1,6))
} else {
# Assumes order type=1:15 and controls children are in dataset
dat$offset=c(rep(1,8),2,rep(1,6))
}
modelformula="count~-1+" # I think I can remove the intercept for MS model
} else if (mtmodel=="MaS"){
if (length(unique(dat$D))==1){
stop("Only 1 phenotype in the phenotype column. Mating asymmetry models require \n
both cases and controls\n")
}
mteffect="as.factor(mt_MaS)"
if (sum(dat$E==1)>0){ # Includes environmental variable
dat$offset[dat$E==0]=c(rep(1,8),2,rep(1,6))
dat$offset[dat$E==1]=c(rep(1,8),2,rep(1,6))
} else { # No environmental variable
# Assumes order type=1:15 (D=1)
dat$offset=c(rep(1,8),2,rep(1,6))
}
modelformula="count~-1+" # I think I can remove intercept
}
if (is.element("E:M",effects)){
if (sum(dat$D==0)>0){ # There are controls; include environmental interaction
dat$C=dat$C*dat$D # 1 if C=1, D=1; 2 if C=2, D=2; 0 OW
dat$M=dat$M*dat$D # 1 if C=1, D=1; 2 if C=2, D=2; 0 OW
# (Note that the E:M term in model will be from crossing this
# variable with E=1, which is exactly what is needed.
if (mtmodel=="HW"){ #Include main effect of E to give different intercept for HW+E case
modeleffects=c(mteffect,paste0(mteffect,":E"),effects,"E","D","E:D")
} else {
modeleffects=c(mteffect,paste0(mteffect,":E"), effects, "D","E:D")
}
} else { # No controls
if (mtmodel=="HW"){ #Include main effect of E to give different intercept for HW+E case
modeleffects=c(mteffect,paste0(mteffect,":E"),effects,"E")
} else {
modeleffects=c(mteffect,paste0(mteffect,":E"),effects)
}
}
} else { # No E:M effect
if (sum(dat$D==0)>0){
dat$C=dat$C*dat$D # 1 if C=1, D=1; 2 if C=2, D=2; 0 OW
dat$M=dat$M*dat$D # 1 if C=1, D=1; 2 if C=2, D=2; 0 O
modeleffects=c(mteffect, effects, "D")
} else {
modeleffects=c(mteffect,effects)
}
}
linpred=paste(modeleffects, collapse="+")
modelformula=paste0(modelformula,linpred)
# Setup results objects
resVec=vector(length=length(effects))
names(resVec)=effects
pvalVec=vector(length=length(effects))
names(pvalVec)=effects
resVecPS=NULL
pvalVecPS=NULL
# Include test and results under population stratification
if (PStest==TRUE){
resVecPS=vector(length=length(effects))
names(resVecPS)=effects
pvalVecPS=vector(length=length(effects))
names(pvalVecPS)=effects
if (sum(dat$D==0)==0){
stop("Can only test for population stratification if there are control trios\n")
} else{
PSeffect=paste0(mteffect,":D")
modelformula.PS=paste(modelformula,PSeffect,sep="+")
}
}
# Run model and save results
res=glm(as.formula(modelformula), data=dat, offset=log(dat$offset), family=poisson())
# R is not consistent about how interaction is specified. Even though it
# is fit as E:M, sometimes R flips it to M:E in the output of results.
if (is.element("M:E",names(coef(res)))){
effects[effects=="E:M"]="M:E"
}
for (j in 1:length(effects)){
resVec[j]=exp(summary(res)$coef[effects[j],1])
pvalVec[j]=summary(res)$coef[effects[j],4]
}
test.res=NULL
if (PStest==TRUE){
res.PS=glm(as.formula(modelformula.PS), data=dat, offset=log(dat$offset), family=poisson())
test.res=anova(res,res.PS, test="LRT")
for (j in 1:length(effects)){
resVecPS[j]=exp(summary(res.PS)$coef[effects[j],1])
pvalVecPS[j]=summary(res.PS)$coef[effects[j],4]
}
}
return(res)
# return(list(effects=resVec, pvals=pvalVec, PS.test=test.res$`Pr(>Chi)`[2],
#             effectsPS=resVecPS, pvalsPS=pvalVecPS))
}
runLoglin(mtmodel = "HW", effects = c("C", "M"), dat = testdat$dat4R)
runLoglin(mtmodel = "HW", effects = c("C", "M"), dat = testdat$dat4R) %>% summary %>% coef()
emim
trill
trillog <- runLoglin(mtmodel = "HW", effects = c("C", "M"), dat = testdat$dat4R)
trillog
trill
trill <- TriLLIEM(dat = testdat$dat4R, mtmodel = "HWE", includeD = TRUE)
trill
trillog
trill$model
trillog$model
trill$data
testdat <- simulateData(ntrios = 1000, nControl = 500, includeControl = TRUE)
emim <- runEMIM(mtmodel = "HWE", peddat = testdat$dat4EMIM) %>% TriLLIEM:::summ_emim()
trill <- TriLLIEM(dat = testdat$dat4R, mtmodel = "HWE", includeD = TRUE) %>% summary() %>% coef
emim
trill
runLoglin(mtmodel = "HW", effects = c("C", "M"), dat = testdat$dat4R) %>% summary %>% coef()
testdat <- simulateData(ntrios = 1000, nControl = 500, includeControl = TRUE, includeE = TRUE, propE = 0.3)
emim <- runEMIM(mtmodel = "HWE", peddat = testdat$dat4EMIM) %>% TriLLIEM:::summ_emim()
trill <- TriLLIEM(dat = testdat$dat4R, mtmodel = "HWE", includeD = TRUE) %>% summary() %>% coef
emim
trill
runLoglin(mtmodel = "HW", effects = c("C", "M"), dat = testdat$dat4R) %>% summary %>% coef()
library(TriLLIEM)
test <- simulateData(includeE = TRUE, propE = 0.3)
tril <- TriLLIEM(dat = test$dat4R, effects = c("C", "M", "Im"))
tril %>% summary %>% coef
runEMIM(effects = c("C", "M", "Im"), peddat = test$dat4EMIM) %>% TriLLIEM::::summ_emim()
runEMIM(effects = c("C", "M", "Im"), peddat = test$dat4EMIM) %>% TriLLIEM:::summ_emim()
tril %>% summary %>% coef
exp(0.2682138)
test$dat4R
?aggregate
test$dat4R %>% aggregate(by = type, FUN = sum())
test$dat4R %>% aggregate(by = type, FUN = sum
test$dat4R %>% aggregate(by = type, FUN = sum)
test$dat4R %>% aggregate(by = list(type), FUN = sum)
test$dat4R %>% aggregate(by = list("type"), FUN = sum)
test$dat4R %>% aggregate(type, FUN = sum)
test$dat4R %>% aggregate("type", FUN = sum)
data.frame(v1 = c(1,3,5,7,8,3,5,NA,4,5,7,9),
v2 = c(11,33,55,77,88,33,55,NA,44,55,77,99) )
state.x77
library(tidyverse)
?summarise
test$dat4R %>% group_by(type) %>% summarize(count = sum(count))
test$dat4R
test$dat4R %>% group_by(type,mt_MS, mt_MaS, M, F, C, D) %>% summarize(count = sum(count))
TriLLIEM(dat = test$dat4R %>% group_by(type,mt_MS, mt_MaS, M, F, C, D) %>% summarize(count = sum(count)), effects = c("C", "M", "Im")) %>% summary %>% coef
TriLLIEM(dat = test$dat4R %>% summarize(count = sum(count), .by = list(type,mt_MS, mt_MaS, M, F, C, D)), effects = c("C", "M", "Im")) %>% summary %>% coef
TriLLIEM(dat = test$dat4R %>% summarize(count = sum(count), .by = c(type,mt_MS, mt_MaS, M, F, C, D)), effects = c("C", "M", "Im")) %>% summary %>% coef
tril %>% summary %>% coef
runEMIM(effects = c("C", "M", "Im"), peddat = test$dat4EMIM) %>% TriLLIEM:::summ_emim()
TriLLIEM(dat = test$dat4R %>% summarize(count = sum(count), .by = c(type,mt_MS, mt_MaS, M, F, C, D)), effects = c("C", "M", "Im")) %>% vcov
tril %>% vcov
test$dat4R %>% summarize(count = sum(count), .by = E, .groups = "drop")
test$dat4R %>% summarize(count = sum(count), .by = -E)
test$dat4R
test$dat4R %>% summarize(count = sum(count), .by = across(-E, -counts))
test$dat4R %>% summarize(count = sum(count), .by = c(-E, -counts))
test$dat4R %>% summarize(count = sum(count), .by = c(-E, -count))
TriLLIEM(dat = test$dat4R %>% summarize(count = sum(count), .by = c(-E, -count)), .by = c(type,mt_MS, mt_MaS, M, F, C, D)), effects = c("C", "M", "Im")) %>% summary %>% coef
TriLLIEM(dat = test$dat4R %>% summarize(count = sum(count), .by = c(-E, -count)), effects = c("C", "M", "Im")) %>% summary %>% coef
simulateData()
simulateData()$dat4R
test$dat4R %>% summarize(count = sum(count), .by = c(-E, -count))
test$dat4R %>%
summarize(count = sum(count), .by = c(-E, -count)) %>%
dplyr::mutate(E = 0)
test$dat4R %>%
summarize(count = sum(count), .by = c(-E, -count), .groups = "keep")
devtools::load_all()
TriLLIEM(dat = test$dat4R), effects = c("C", "M", "Im")) %>% summary %>% coef
TriLLIEM(dat = test$dat4R, effects = c("C", "M", "Im")) %>% summary %>% coef
test$dat4R
TriLLIEM(dat = test$dat4R, effects = c("C", "M", "Im"), includeE = TRUE) %>% summary %>% coef
TriLLIEM(dat = test$dat4R, effects = c("C", "M", "Im"), includeE = TRUE, Einteraction = "Im", Estrat = TRUE) %>% summary %>% coef
runEMIM(effects = c("C", "M", "Im"), peddat = test$dat4EMIM, includeE = TRUE, Einteraction = "Im") %>% TriLLIEM:::summ_emim()
exp(-0.2015593)
emim_results[[1]][[31]][[1]]
tril_results[[1]][[31]]$strat[[1]]
exp(0.30519205)
tril_results[[1]][[31]]$strat[[2]]
emim_results[[1]][[31]][[2]]
conditions <- expand.grid(
maf = 0.3,
R = c(1, 1.15),
S = 1,
V = c(1, 1.5, 1.6),
mtCoef = c(0.85, 1, 1.15),
Im = c(1, 1.2, 1.4),
If = c(1, 1.2, 1.4),
includeE = c(FALSE, TRUE),
Einteraction = c("Im", "If"),
ntrios = 2000,
propE = c(0.3, 0.5),
includeControl = c(FALSE, TRUE),
nControl = 1000,
stringsAsFactors = FALSE
) %>%
filter(
!(!includeE & !(Einteraction == "Im" & V == 1 & propE == 0.3)),
(R == 1) + (S == 1) + (V == 1) + (Im == 1) + (If == 1) >= 4,
!(If != 1 & (Im != 1 | Einteraction == "Im")),
!(Im != 1 & Einteraction == "If")
)
library(TriLLIEM)
conditions <- expand.grid(
maf = 0.3,
R = c(1, 1.15),
S = 1,
V = c(1, 1.5, 1.6),
mtCoef = c(0.85, 1, 1.15),
Im = c(1, 1.2, 1.4),
If = c(1, 1.2, 1.4),
includeE = c(FALSE, TRUE),
Einteraction = c("Im", "If"),
ntrios = 2000,
propE = c(0.3, 0.5),
includeControl = c(FALSE, TRUE),
nControl = 1000,
stringsAsFactors = FALSE
) %>%
filter(
!(!includeE & !(Einteraction == "Im" & V == 1 & propE == 0.3)),
(R == 1) + (S == 1) + (V == 1) + (Im == 1) + (If == 1) >= 4,
!(If != 1 & (Im != 1 | Einteraction == "Im")),
!(Im != 1 & Einteraction == "If")
)
library(tidyverse)
conditions <- expand.grid(
maf = 0.3,
R = c(1, 1.15),
S = 1,
V = c(1, 1.5, 1.6),
mtCoef = c(0.85, 1, 1.15),
Im = c(1, 1.2, 1.4),
If = c(1, 1.2, 1.4),
includeE = c(FALSE, TRUE),
Einteraction = c("Im", "If"),
ntrios = 2000,
propE = c(0.3, 0.5),
includeControl = c(FALSE, TRUE),
nControl = 1000,
stringsAsFactors = FALSE
) %>%
filter(
!(!includeE & !(Einteraction == "Im" & V == 1 & propE == 0.3)),
(R == 1) + (S == 1) + (V == 1) + (Im == 1) + (If == 1) >= 4,
!(If != 1 & (Im != 1 | Einteraction == "Im")),
!(Im != 1 & Einteraction == "If")
)
View(conditions)
with(conditions[31,], print(Einteraction))
?TriLLIEM:::summ_emim()
with(conditions[31,], runEMIM(peddat = test$dat4EMIM, effects = c("C", "M", "If"), includeE = TRUE, Einteraction = Einteraction))
test <- simulateData(includeE = TRUE, Eprop = 0.3)
test <- simulateData(includeE = TRUE, propE = 0.3)
with(conditions[31,], runEMIM(peddat = test$dat4EMIM, effects = c("C", "M", "If"), includeE = TRUE, Einteraction = Einteraction))
with(conditions[31,], runEMIM(peddat = test$dat4EMIM, effects = c("C", "M", "If"), includeE = TRUE, Einteraction = Einteraction) %>% TriLLIEM:::summ_emim)
with(conditions[31,], runEMIM(peddat = test$dat4EMIM, effects = c("C", "M", "If"), includeE = TRUE, Einteraction = Einteraction) %>% TriLLIEM:::summ_emim())
tril_results[[1]][[31]]$strat[[1]]
emim_results[[1]][[31]][[1]]
emim_results[[2]][[31]][[1]]
emim_results[[3]][[31]][[1]]
emim_results[[1]][[35]][[1]]
emim_results[[1]][[100]][[1]]
tril_results[[1]][[31]]$nostrat[[1]]
tril_results[[1]][[100]]$strat[[1]]
emim_results[[1]][[100]][[1]]
exp(0.04905572)
emim_results[[1]][[88]][[1]]
emim_results[[1]][[90]][[1]]
emim_results[[1]][[94]][[1]]
tril_results[[1]][[94]]$strat[[1]]
tril_results[[1]][[94]]$nostrat[[1]]
exp(0.43916758)
tril_results[[1]][[84]]$nostrat[[1]]
tril_results[[1]][[85]]$nostrat[[1]]
emim_results[[1]][[85]][[1]]
test <- simulateData(includeControl = TRUE, nControl = 500)
TriLLIEM(test$dat4R, effects = c("C", "M", "Im"), includeD = TRUE) %>% summary %>% coef
TriLLIEM(test$dat4R, effects = c("C", "M", "Im"), includeD = TRUE, dat = test$dat4R) %>% summary %>% coef
traceback()
TriLLIEM(dat = test$dat4R, effects = c("C", "M", "Im"), includeD = TRUE) %>% summary %>% coef
runEMIM(peddat = test$dat4EMIM, effects = c("C", "M", "Im")) %>% TriLLIEM:::summ_emim()
runEMIM(peddat = test$dat4EMIM, effects = c("C", "M", "Im"), mtmodel = "HWE") %>% TriLLIEM:::summ_emim()
TriLLIEM(dat = test$dat4R, effects = c("C", "M", "Im"), includeD = TRUE, mtmodel = "HWE") %>% summary %>% coef
test <- simulateData(includeControl = TRUE, nControl = 500, includeE = TRUE, propE = 0.3)
TriLLIEM(dat = test$dat4R, effects = c("C", "M", "Im"), includeD = TRUE, mtmodel = "HWE", includeE = TRUE, Einteraction = "Im") %>% summary %>% coef
runEMIM(peddat = test$dat4EMIM, effects = c("C", "M", "Im"), mtmodel = "HWE", includeE = TRUE, Einteraction = "Im") %>% TriLLIEM:::summ_emim()
TriLLIEM(dat = test$dat4R, effects = c("C", "M", "Im"), includeD = TRUE, mtmodel = "HWE", includeE = TRUE, Einteraction = "Im", Estrat = TRUE) %>% summary %>% coef
exp(0.59835382)
test <- simulateData(includeControl = TRUE, nControl = 500, includeE = TRUE, propE = 0.3)
runEMIM(peddat = test$dat4EMIM, effects = c("C", "M", "Im"), mtmodel = "HWE", includeE = TRUE, Einteraction = "Im") %>% TriLLIEM:::summ_emim()
TriLLIEM(dat = test$dat4R, effects = c("C", "M", "Im"), includeD = TRUE, mtmodel = "HWE", includeE = TRUE, Einteraction = "Im", Estrat = TRUE) %>% summary %>% coef
test <- simulateData(includeControl = TRUE, nControl = 500, includeE = TRUE, propE = 0.3)
runEMIM(peddat = test$dat4EMIM, effects = c("C", "M", "Im"), mtmodel = "HWE", includeE = TRUE, Einteraction = "Im") %>% TriLLIEM:::summ_emim()
TriLLIEM(dat = test$dat4R, effects = c("C", "M", "Im"), includeD = TRUE, mtmodel = "HWE", includeE = TRUE, Einteraction = "Im", Estrat = TRUE) %>% summary %>% coef
test <- simulateData(includeControl = TRUE, nControl = 500, includeE = TRUE, propE = 0.3)
runEMIM(peddat = test$dat4EMIM, effects = c("C", "M", "Im"), mtmodel = "HWE", includeE = TRUE, Einteraction = "Im") %>% TriLLIEM:::summ_emim()
TriLLIEM(dat = test$dat4R, effects = c("C", "M", "Im"), includeD = TRUE, mtmodel = "HWE", includeE = TRUE, Einteraction = "Im", Estrat = TRUE) %>% summary %>% coef
exp(0.40040265)
test <- simulateData(includeControl = TRUE, nControl = 500, includeE = TRUE, propE = 0.3)
runEMIM(peddat = test$dat4EMIM, effects = c("C", "M", "Im"), mtmodel = "HWE") %>% TriLLIEM:::summ_emim()
TriLLIEM(dat = test$dat4R, effects = c("C", "M", "Im"), includeD = TRUE, mtmodel = "HWE") %>% summary %>% coef
test <- simulateData(includeControl = TRUE, nControl = 500, includeE = TRUE, propE = 0.3)
runEMIM(peddat = test$dat4EMIM, effects = c("C", "M", "Im"), mtmodel = "HWE") %>% TriLLIEM:::summ_emim()
TriLLIEM(dat = test$dat4R, effects = c("C", "M", "Im"), includeD = TRUE, mtmodel = "HWE") %>% summary %>% coef
test <- simulateData(includeControl = TRUE, nControl = 500, includeE = TRUE, propE = 0.3)
runEMIM(peddat = test$dat4EMIM, effects = c("C", "M", "Im"), mtmodel = "HWE", includeE = TRUE, Einteraction = "Im") %>% TriLLIEM:::summ_emim()
TriLLIEM(dat = test$dat4R, effects = c("C", "M", "Im"), includeD = TRUE, mtmodel = "HWE", includeE = TRUE, Einteraction = "Im", Estrat = TRUE) %>% summary %>% coef
TriLLIEM(dat = test$dat4R, effects = c("C", "M", "Im"), includeD = TRUE, mtmodel = "HWE", includeE = TRUE, Einteraction = "Im", Estrat = TRUE)$model
6.331496/13
11.180925/27
5.844458/12
15.322009/37
TriLLIEM(dat = test$dat4R, effects = c("C", "M", "Im"), includeD = TRUE, mtmodel = "HWE", includeE = TRUE, Einteraction = "Im", Estrat = TRUE) %>% vcov()
test <- simulateData(includeControl = TRUE, nControl = 500, includeE = TRUE, propE = 0.3)
runEMIM(peddat = test$dat4EMIM, effects = c("C", "M", "Im"), mtmodel = "HWE", includeE = TRUE, Einteraction = "Im") %>% TriLLIEM:::summ_emim()
TriLLIEM(dat = test$dat4R, effects = c("C", "M", "Im"), includeD = TRUE, mtmodel = "HWE", includeE = TRUE, Einteraction = "Im", Estrat = TRUE) %>% summary %>% coef
test <- simulateData(includeControl = TRUE, nControl = 500, includeE = TRUE, propE = 0.3)
runEMIM(peddat = test$dat4EMIM, effects = c("C", "M", "Im"), mtmodel = "HWE", includeE = TRUE, Einteraction = "Im") %>% TriLLIEM:::summ_emim()
TriLLIEM(dat = test$dat4R, effects = c("C", "M", "Im"), includeD = TRUE, mtmodel = "HWE", includeE = TRUE, Einteraction = "Im", Estrat = TRUE) %>% summary %>% coef
test <- simulateData(includeControl = TRUE, nControl = 500, includeE = TRUE, propE = 0.3)
runEMIM(peddat = test$dat4EMIM, effects = c("C", "M", "Im"), mtmodel = "HWE", includeE = TRUE, Einteraction = "Im") %>% TriLLIEM:::summ_emim()
TriLLIEM(dat = test$dat4R, effects = c("C", "M", "Im"), includeD = TRUE, mtmodel = "HWE", includeE = TRUE, Einteraction = "Im", Estrat = TRUE) %>% summary %>% coef
test <- simulateData(includeControl = TRUE, nControl = 500, includeE = TRUE, propE = 0.3)
runEMIM(peddat = test$dat4EMIM, effects = c("C", "M", "Im"), mtmodel = "HWE", includeE = TRUE, Einteraction = "Im") %>% TriLLIEM:::summ_emim()
TriLLIEM(dat = test$dat4R, effects = c("C", "M", "Im"), includeD = TRUE, mtmodel = "HWE", includeE = TRUE, Einteraction = "Im", Estrat = TRUE) %>% summary %>% coef
test <- simulateData(includeControl = TRUE, nControl = 500, includeE = TRUE, propE = 0.3)
runEMIM(peddat = test$dat4EMIM, effects = c("C", "M", "Im"), mtmodel = "HWE", includeE = TRUE, Einteraction = "Im") %>% TriLLIEM:::summ_emim()
TriLLIEM(dat = test$dat4R, effects = c("C", "M", "Im"), includeD = TRUE, mtmodel = "HWE", includeE = TRUE, Einteraction = "Im", Estrat = TRUE) %>% summary %>% coef
test <- simulateData(includeControl = TRUE, nControl = 500, includeE = TRUE, propE = 0.3)
runEMIM(peddat = test$dat4EMIM, effects = c("C", "M", "Im"), mtmodel = "HWE", includeE = TRUE, Einteraction = "Im") %>% TriLLIEM:::summ_emim()
TriLLIEM(dat = test$dat4R, effects = c("C", "M", "Im"), includeD = TRUE, mtmodel = "HWE", includeE = TRUE, Einteraction = "Im", Estrat = TRUE) %>% summary %>% coef
test <- simulateData(includeControl = TRUE, nControl = 500, includeE = TRUE, propE = 0.3)
runEMIM(peddat = test$dat4EMIM, effects = c("C", "M", "Im"), mtmodel = "HWE", includeE = TRUE, Einteraction = "Im") %>% TriLLIEM:::summ_emim()
TriLLIEM(dat = test$dat4R, effects = c("C", "M", "Im"), includeD = TRUE, mtmodel = "HWE", includeE = TRUE, Einteraction = "Im", Estrat = TRUE) %>% summary %>% coef
test <- simulateData(includeControl = TRUE, nControl = 500, includeE = TRUE, propE = 0.3)
runEMIM(peddat = test$dat4EMIM, effects = c("C", "M", "Im"), mtmodel = "HWE", includeE = TRUE, Einteraction = "Im") %>% TriLLIEM:::summ_emim()
TriLLIEM(dat = test$dat4R, effects = c("C", "M", "Im"), includeD = TRUE, mtmodel = "HWE", includeE = TRUE, Einteraction = "Im", Estrat = TRUE) %>% summary %>% coef
test <- simulateData(includeControl = TRUE, nControl = 500, includeE = TRUE, propE = 0.3)
runEMIM(peddat = test$dat4EMIM, effects = c("C", "M", "Im"), mtmodel = "HWE", includeE = TRUE, Einteraction = "Im") %>% TriLLIEM:::summ_emim()
TriLLIEM(dat = test$dat4R, effects = c("C", "M", "Im"), includeD = TRUE, mtmodel = "HWE", includeE = TRUE, Einteraction = "Im", Estrat = TRUE) %>% summary %>% coef
test <- simulateData(includeControl = TRUE, nControl = 500, includeE = TRUE, propE = 0.3)
runEMIM(peddat = test$dat4EMIM, effects = c("C", "M", "Im"), mtmodel = "HWE", includeE = TRUE, Einteraction = "Im") %>% TriLLIEM:::summ_emim()
TriLLIEM(dat = test$dat4R, effects = c("C", "M", "Im"), includeD = TRUE, mtmodel = "HWE", includeE = TRUE, Einteraction = "Im", Estrat = TRUE) %>% summary %>% coef
test <- simulateData(includeControl = TRUE, nControl = 500, includeE = TRUE, propE = 0.3)
runEMIM(peddat = test$dat4EMIM, effects = c("C", "M", "Im"), mtmodel = "HWE", includeE = TRUE, Einteraction = "Im") %>% TriLLIEM:::summ_emim()
TriLLIEM(dat = test$dat4R, effects = c("C", "M", "Im"), includeD = TRUE, mtmodel = "HWE", includeE = TRUE, Einteraction = "Im", Estrat = TRUE) %>% summary %>% coef
test <- simulateData(includeControl = TRUE, nControl = 500, includeE = TRUE, propE = 0.3)
runEMIM(peddat = test$dat4EMIM, effects = c("C", "M", "Im"), mtmodel = "HWE", includeE = TRUE, Einteraction = "Im") %>% TriLLIEM:::summ_emim()
TriLLIEM(dat = test$dat4R, effects = c("C", "M", "Im"), includeD = TRUE, mtmodel = "HWE", includeE = TRUE, Einteraction = "Im", Estrat = TRUE) %>% summary %>% coef
test <- simulateData(includeControl = TRUE, nControl = 500, includeE = TRUE, propE = 0.3)
runEMIM(peddat = test$dat4EMIM, effects = c("C", "M", "Im"), mtmodel = "HWE", includeE = TRUE, Einteraction = "Im") %>% TriLLIEM:::summ_emim()
TriLLIEM(dat = test$dat4R, effects = c("C", "M", "Im"), includeD = TRUE, mtmodel = "HWE", includeE = TRUE, Einteraction = "Im", Estrat = TRUE) %>% summary %>% coef
test <- simulateData(includeControl = TRUE, nControl = 500, includeE = TRUE, propE = 0.3)
runEMIM(peddat = test$dat4EMIM, effects = c("C", "M", "Im"), mtmodel = "HWE", includeE = TRUE, Einteraction = "Im") %>% TriLLIEM:::summ_emim()
TriLLIEM(dat = test$dat4R, effects = c("C", "M", "Im"), includeD = TRUE, mtmodel = "HWE", includeE = TRUE, Einteraction = "Im", Estrat = TRUE) %>% summary %>% coef
runEMIM(peddat = test$dat4EMIM, effects = c("C", "M", "Im"), mtmodel = "HWE", includeE = TRUE, Einteraction = "M") %>% TriLLIEM:::summ_emim()
exp(0.31082306)
View(bias_emim)
